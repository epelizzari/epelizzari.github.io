import{S as e}from"./chunks/Swagger.CHO3_avl.js";import{c as a,J as i,a4 as s,o as n}from"./chunks/framework.DloxLV0O.js";const o=s(`<h1 id="autenticacion-api" tabindex="-1">Autenticación API <a class="header-anchor" href="#autenticacion-api" aria-label="Permalink to &quot;Autenticación API&quot;">​</a></h1><h2 id="introduccion" tabindex="-1">Introducción <a class="header-anchor" href="#introduccion" aria-label="Permalink to &quot;Introducción&quot;">​</a></h2><p>Bienvenidos a la documentación de la API de Autenticación de nuestra plataforma. Aquí encontrarás información detallada sobre cómo gestionamos la autenticación y la seguridad, asegurando que solo los usuarios autorizados puedan acceder a funcionalidades específicas y a datos sensibles.</p><p>En nuestra API, la seguridad es primordial. Por eso, empleamos estándares modernos y robustos para la gestión de sesiones y el control de acceso, incluyendo el uso de JSON Web Tokens (JWT) y cookies HTTP-only para una capa adicional de seguridad.</p><h2 id="autenticacion-con-cookies-http-only" tabindex="-1">Autenticación con Cookies HTTP-only <a class="header-anchor" href="#autenticacion-con-cookies-http-only" aria-label="Permalink to &quot;Autenticación con Cookies HTTP-only&quot;">​</a></h2><p>La autenticación en nuestra API se maneja a través de JWT, que se entregan a los usuarios como cookies HTTP-only después de un inicio de sesión exitoso. Este método asegura que el token de autenticación se almacene de manera segura en el navegador del cliente y se envíe automáticamente con cada solicitud a la API, sin la posibilidad de ser accedido o manipulado por JavaScript. Esto mejora la seguridad al proteger contra ataques de cross-site scripting (XSS).</p><h3 id="proceso-de-autenticacion" tabindex="-1">Proceso de Autenticación: <a class="header-anchor" href="#proceso-de-autenticacion" aria-label="Permalink to &quot;Proceso de Autenticación:&quot;">​</a></h3><ol><li><p><strong>Inicio de Sesión</strong>: Al realizar una petición POST a <code>/usuarios/login</code> con las credenciales correctas, el servidor valida estas credenciales y, si son válidas, retorna una respuesta <code>200 OK</code> junto con una cookie HTTP-only que contiene el JWT.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;success&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Usuario logueado con éxito&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Uso del Token</strong>: Una vez que el navegador almacena la cookie, esta se envía automáticamente en las cabeceras de las solicitudes subsiguientes a la API, permitiendo el acceso a rutas protegidas sin necesidad de manejar explícitamente el token en el frontend.</p></li><li><p><strong>Cierre de Sesión</strong>: Para cerrar la sesión, se realiza una petición POST a <code>/usuarios/logout</code>, que instruye al navegador para eliminar la cookie de autenticación, finalizando así la sesión del usuario.</p></li><li><p><strong>Verificación del Estado de Autenticación</strong>: El endpoint <code>/usuarios/checkAuthStatus</code> puede utilizarse en cualquier momento para verificar si el usuario está actualmente autenticado, basándose en la presencia y validez de la cookie de autenticación.</p></li></ol><h3 id="consideraciones-de-seguridad" tabindex="-1">Consideraciones de Seguridad: <a class="header-anchor" href="#consideraciones-de-seguridad" aria-label="Permalink to &quot;Consideraciones de Seguridad:&quot;">​</a></h3><ul><li>Las cookies HTTP-only no pueden ser leídas ni modificadas por JavaScript, lo que reduce significativamente el riesgo de ataques XSS.</li><li>Es importante configurar correctamente las políticas de CORS y asegurar que las cookies se envíen solo a través de conexiones HTTPS para proteger contra ataques de tipo man-in-the-middle.</li></ul><p>Esta estrategia de autenticación está diseñada para ofrecer un equilibrio óptimo entre seguridad y facilidad de uso, asegurando que nuestra API permanezca segura y accesible.</p>`,11),p=JSON.parse('{"title":"Autenticación API","description":"","frontmatter":{},"headers":[],"relativePath":"developer/autenticacion.md","filePath":"developer/autenticacion.md"}'),t={name:"developer/autenticacion.md"},h=Object.assign(t,{setup(c){return(r,l)=>(n(),a("div",null,[o,i(e,{id:"dialersSwagger",yaml:"/docs/specs/autenticacion/autenticacion.yaml"})]))}});export{p as __pageData,h as default};
